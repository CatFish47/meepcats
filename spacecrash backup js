const rad = Math.PI / 180;
let canvases = [];
let colors = [
  "#6A0000",
  "#900000",
  "#902B2B",
  "#A63232",
  "#A62626",
  "#FD5039",
  "#C12F2A",
  "#FF6540",
  "#f93801"
];
const spring = 1 / 10;
const friction = 0.85;

const canvasWidth = (canvasHeight = 100);
const particlesNumber = 25;// change this
const canvasesNumber = 24;// and this

class HTML5canvas {
  constructor(i) {
    //this.i = i;
    this.particles = [];

    this.createElements();

    this.canv.addEventListener("click", () => {
      this.createParticles();
      this.explosionDraw();
    });
  }
  createElements() {
    this.div = document.createElement("div");

    this.canv = document.createElement("canvas");
    this.ctx = this.canv.getContext("2d");
    this.cw = this.canv.width = canvasWidth;
    this.ch = this.canv.height = canvasHeight;

    this.div.appendChild(this.canv);
    wrapper.appendChild(this.div);
  }
  createParticles() {
    this.particles.length = 0;
    for (let i = 0; i < particlesNumber; i++) {
      this.particles.push(new Particle());
    }
  }
  explosionUpdate() {
    if (this.particles.length > 0) {
      for (let i = 0; i < this.particles.length; i++) {
        this.particles[i].update();
        if (this.particles[i].r < 0.5) {
          this.particles.splice(i, 1);
        }
      }
    }
  }

  explosionDraw() {
    if (this.particles.length > 0) {
      this.ctx.clearRect(0, 0, this.cw, this.ch);
      this.ctx.globalCompositeOperation = "lighter";
      for (let i = 0; i < this.particles.length; i++) {
        this.particles[i].draw(this.ctx);
      }
    }
  }
}

class Particle {
  constructor() {
    this.decay = 0.95;
    //////////// Change this ///////////////
    this.r = randomIntFromInterval(5, 35);
    this.R = 40 - this.r;
    ////////////////////////////////////////
    this.angle = Math.random() * 2 * Math.PI;
    this.center = { x: canvasWidth / 2, y: canvasHeight / 2 };
    this.pos = {};
    this.pos.x = this.center.x + this.r * Math.cos(this.angle);
    this.pos.y = this.center.y + this.r * Math.sin(this.angle);
    this.target = {};
    this.target.x = this.center.x + this.R * Math.cos(this.angle);
    this.target.y = this.center.y + this.R * Math.sin(this.angle);
    this.color = colors[~~(Math.random() * colors.length)];
    this.vel = {
      x: 0,
      y: 0
    };
    this.acc = {
      x: 0,
      y: 0
    };
  }

  update() {
    let dx = this.target.x - this.pos.x;
    let dy = this.target.y - this.pos.y;

    this.acc.x = dx * spring;
    this.acc.y = dy * spring;
    this.vel.x += this.acc.x;
    this.vel.y += this.acc.y;

    this.vel.x *= friction;
    this.vel.y *= friction;

    this.pos.x += this.vel.x;
    this.pos.y += this.vel.y;

    if (this.r > 0) this.r *= this.decay;
  }

  draw(ctx) {
    ctx.fillStyle = this.color;
    ctx.beginPath();
    ctx.arc(this.pos.x, this.pos.y, this.r, 0, 2 * Math.PI);
    ctx.fill();
  }
}

for (let i = 0; i < canvasesNumber; i++) {
  canvases.push(new HTML5canvas(i));
}

function Draw() {
  requestId = window.requestAnimationFrame(Draw);

  for (let j = 0; j < canvases.length; j++) {
    let c = canvases[j];
    c.explosionUpdate();
    c.explosionDraw();
  }
}
Draw();

function randomIntFromInterval(mn, mx) {
  return Math.floor(Math.random() * (mx - mn + 1) + mn);
}
